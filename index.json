[{"authors":["admin"],"categories":null,"content":"I am a fourth year PhD student at University of Groningen (The Netherlands) under the supervision of Prof. Jorge A. P√©rez and Prof. Gerard Renardel de Lavalette. My research work concerns tools for rigorous software development, in particular techniques for certifying correct and reliable communication-intensive software.\nPrior to this, I developed Master thesis on the modular type inference algorithm for ML-like programming languages in Haskell supervised by Prof. Silvia Ghilezan at the Faculty of Technical Sciences (Novi Sad, Serbia).\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://alenarslanagic.net/author/alen-arslanagic/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/alen-arslanagic/","section":"authors","summary":"I am a fourth year PhD student at University of Groningen (The Netherlands) under the supervision of Prof. Jorge A. P√©rez and Prof. Gerard Renardel de Lavalette. My research work concerns tools for rigorous software development, in particular techniques for certifying correct and reliable communication-intensive software.","tags":null,"title":"Alen Arslanagiƒá","type":"authors"},{"authors":["**Alen Arslanagiƒá**","[**Pavle Subotiƒá**](http://psubotic.github.io)","[**Jorge A. P√©rez**](https://www.jperez.nl)"],"categories":[],"content":"","date":1684514185,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684514185,"objectID":"265e5b201f82dbff3f898ce2780d9a09","permalink":"https://alenarslanagic.net/publication/bfa/","publishdate":"2022-06-19T17:36:25+01:00","relpermalink":"/publication/bfa/","section":"publication","summary":"We consider a more general formulation of Bit-vector Finite Automata (BFAs) that we introduced in our iFM'22 paper. The extended formalism accounts for both 'may call' and 'must call' properties (the latter is new to this paper). In particular, we show how the main ideas of our approach can be accommodated to support 'must call' logic. We provide full proofs of correctness for the extended BFAs and the extension of the experimental evaluation.","tags":[],"title":"Bit-vector Typestate Analysis","type":"publication"},{"authors":["**Alen Arslanagiƒá**","[**Dan Frumin**](https://groupoid.moe)","[**Jorge A. P√©rez**](https://www.jperez.nl)"],"categories":[],"content":"","date":1672776131,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672776131,"objectID":"5ba2fd989be89b2fa0214579827bdc81","permalink":"https://alenarslanagic.net/publication/misty-journal/","publishdate":"2023-01-03T22:02:11+02:00","relpermalink":"/publication/misty-journal/","section":"publication","summary":"We study a minimal formulation of session types *without sequencing*. We show how to forgoing sequencing in types, and only with sequencing on the level of processes, we can recover the usual theory of session types. More specifically, we show an encoding of regular session types into minimal session types, grounded in Parrow‚Äôs decomposition of a pi-calculus process into a collection of trios. We show that the correctness of the decomposition using a form of a session-typed bisimulation.","tags":[""],"title":"A Minimal Formulation of Session Types","type":"publication"},{"authors":["**Alen Arslanagiƒá**","[**Pavle Subotiƒá**](http://psubotic.github.io)","[**Jorge A. P√©rez**](https://www.jperez.nl)"],"categories":[],"content":"","date":1655656585,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655656585,"objectID":"ee6fcbb2974271240c0f080d59fc4699","permalink":"https://alenarslanagic.net/publication/lfa/","publishdate":"2022-06-19T17:36:25+01:00","relpermalink":"/publication/lfa/","section":"publication","summary":"Static analyses based on typestates are important in certifying correctness of code contracts. Such analyses rely on Deterministic Finite Automata (DFAs) to specify properties of an object. We target the analysis of contracts in low-latency environments, where many useful contracts are impractical to codify as DFAs and/or the size of their associated DFAs leads to sub-par performance. To address this bottleneck, we present a lightweight typestate analyzer, based on an expressive specification language that can succinctly specify code contracts. By implementing it in the static analyzer Infer, we demonstrate considerable performance and usability benefits when compared to existing techniques. A central insight is to rely on a sub-class of DFAs with efficient bit-vector operations.","tags":[],"title":"Scalable Typestate Analysis for Low-Latency Environments","type":"publication"},{"authors":["**Alen Arslanagiƒá**","**Anda-Amelia Palamariuc**","[**Jorge A. P√©rez**](https://www.jperez.nl)"],"categories":[],"content":"","date":1626283549,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626283549,"objectID":"0960ce0a4d281ea546e4e5b3efb9127c","permalink":"https://alenarslanagic.net/publication/mst-pi/","publishdate":"2021-07-14T19:25:49+02:00","relpermalink":"/publication/mst-pi/","section":"publication","summary":"Session types enable the static verification of message-passing programs. A session type specifies a channel‚Äôs protocol as sequences of messages. Prior work established a minimality result: every process typable with standard session types can be compiled down to a process typable using minimal session types: session types without sequencing construct. This result justifies session types in terms of themselves; it holds for a higher-order session ùúã-calculus, where values are abstractions (functions from names to processes). This paper establishes a minimality result but now for the session ùúã-calculus, the language in which values are names and for which session types have been more widely studied. This new minimality result for the session ùúã -calculus can be obtained by composing existing results. We develop associated optimizations and enhancements of this result, and establish its static and dynamic correctness.","tags":[],"title":"Minimal Session Types for the pi-calculus","type":"publication"},{"authors":[],"categories":[],"content":"","date":1597946701,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597946701,"objectID":"818129ac063a92a52c143c935627ea76","permalink":"https://alenarslanagic.net/project/unify/","publishdate":"2020-08-20T20:05:01+02:00","relpermalink":"/project/unify/","section":"project","summary":"Principal Investigator: Prof. Jorge A. P√©rez","tags":[],"title":"Unifying Correctness for Communicating Software","type":"project"},{"authors":["**Alen Arslanagiƒá**","**Erik Voogd**","[**Jorge A. P√©rez**](https://www.jperez.nl)"],"categories":[],"content":"","date":1564862531,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564862531,"objectID":"ae6df673829ec546c42ed144ad83ea29","permalink":"https://alenarslanagic.net/publication/misty/","publishdate":"2020-08-03T22:02:11+02:00","relpermalink":"/publication/misty/","section":"publication","summary":"Session types are a type-based approach to the verification of message-passing programs. They have been much studied as type systems for the pi-calculus and for languages such as Java. A session type specifies what and when should be exchanged through a channel. Central to session-typed languages are constructs in types and processes that specify sequencing in protocols. Here we study minimal session types, session types without sequencing. This is arguably the simplest form of session types. By relying on a core process calculus with sessions and higher-order concurrency (abstraction passing), we prove that every process typable with usual (non minimal) session types can be compiled down into a process typed with minimal session types. This means that having sequencing constructs in both processes and session types is redundant; only sequentiality in processes is indispensable, as it can precisely codify sequentiality in types. Our developments draw inspiration from work by Parrow on behavior-preserving decompositions of untyped processes. By casting Parrow's results in the realm of typed processes, our results reveal a conceptually simple formulation of session types and a principled avenue to the integration of session types into languages without sequencing in types.","tags":[""],"title":"Minimal Session Types","type":"publication"},{"authors":[],"categories":null,"content":"","date":1543950704,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543950704,"objectID":"534bba5309487c13c6d64b220e66cf27","permalink":"https://alenarslanagic.net/talk/plnl18/","publishdate":"2020-08-04T21:11:44+02:00","relpermalink":"/talk/plnl18/","section":"talk","summary":"","tags":[],"title":"Minimal Session Types","type":"talk"},{"authors":[],"categories":null,"content":"","date":1533409898,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1533409898,"objectID":"979a3fe729a2c52046df8d400d030b9d","permalink":"https://alenarslanagic.net/talk/lap18/","publishdate":"2020-08-04T21:11:38+02:00","relpermalink":"/talk/lap18/","section":"talk","summary":"","tags":[],"title":"Type system with restrictions (LAP18)","type":"talk"}]